type Verification = {
  attempts: number | null;
  error: string | null;
  expireAt: string | null;
  externalVerificationRedirectURL: string | null;
  id: string | undefined;
  message: string | null;
  nonce: string | null;
  pathRoot: string;
  status: string;
  strategy: string;
  verifiedAtClient: boolean | undefined;
  verifiedFromTheSameClient?: () => void;
};

type EmailAddress = {
  attemptVerification: () => void;
  createEmailLinkFlow: () => void;
  createEnterpriseSSOLinkFlow: () => void;
  destroy: () => void;
  emailAddress: string;
  id: string;
  linkedTo: any[];
  matchesSsoConnection: boolean;
  pathRoot: string;
  prepareVerification: () => void;
  toString: () => string;
  verification: Verification;
};

type ExternalAccount = {
  approvedScopes: string;
  destroy: () => void;
  emailAddress: string;
  firstName: string;
  id: string;
  identificationId: string;
  imageUrl: string;
  label: string | null;
  lastName: string;
  pathRoot: string;
  provider: string;
  providerUserId: string;
  publicMetadata: Record<string, unknown>;
  reauthorize: () => void;
  username: string;
  verification: Verification;
};

type UnsafeMetadata = {
  address: string;
  onboarding_completed: boolean;
  phoneONG: string;
  phoneOwner: string;
  token: string;
};

export type UserInfoClerk = {
  backupCodeEnabled: boolean;
  cachedSessionsWithActivities: any | null;
  createBackupCode: () => void;
  createEmailAddress: () => void;
  createExternalAccount: () => void;
  createOrganizationEnabled: boolean;
  createOrganizationsLimit: number | undefined;
  createPasskey: () => void;
  createPhoneNumber: () => void;
  createTOTP: () => void;
  createWeb3Wallet: () => void;
  createdAt: string;
  delete: () => void;
  deleteSelfEnabled: boolean;
  disableTOTP: () => void;
  emailAddresses: EmailAddress[];
  enterpriseAccounts: any[];
  externalAccounts: ExternalAccount[];
  externalId: string | null;
  firstName: string;
  fullName: string;
  getOrganizationInvitations: () => void;
  getOrganizationMemberships: () => void;
  getOrganizationSuggestions: () => void;
  getSessions: () => void;
  hasImage: boolean;
  id: string;
  imageUrl: string;
  isPrimaryIdentification: () => void;
  lastName: string;
  lastSignInAt: string;
  leaveOrganization: () => void;
  legalAcceptedAt: string | null;
  organizationMemberships: any[];
  passkeys: any[];
  passwordEnabled: boolean;
  pathRoot: string;
  phoneNumbers: any[];
  primaryEmailAddress: EmailAddress;
  primaryEmailAddressId: string;
  primaryPhoneNumber: string | null;
  primaryPhoneNumberId: string | null;
  primaryWeb3Wallet: string | null;
  primaryWeb3WalletId: string | null;
  publicMetadata: Record<string, unknown>;
  removePassword: () => void;
  samlAccounts: any[];
  setProfileImage: () => void;
  totpEnabled: boolean;
  twoFactorEnabled: boolean;
  unsafeMetadata: UnsafeMetadata;
  update: () => void;
  updatePassword: () => void;
  updatedAt: string;
  username: string | null;
  verifyTOTP: () => void;
  web3Wallets: any[];
};
